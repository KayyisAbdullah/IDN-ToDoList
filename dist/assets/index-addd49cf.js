(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const r of a.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function i(s){if(s.ep)return;s.ep=!0;const a=t(s);fetch(s.href,a)}})();class l{constructor(){this.tasks=JSON.parse(localStorage.getItem("tasks"))||[],this.currentFilter="all",this.initializeElements(),this.initializeEventListeners(),this.updateDisplay()}initializeElements(){this.form=document.getElementById("todoForm"),this.input=document.getElementById("todoInput"),this.dateInput=document.getElementById("todoDate"),this.taskList=document.getElementById("todoList"),this.taskCounter=document.getElementById("taskCounter"),this.filterBtns=document.querySelectorAll(".filter-btn")}initializeEventListeners(){this.form.addEventListener("submit",e=>this.handleSubmit(e)),this.filterBtns.forEach(e=>{e.addEventListener("click",()=>this.setFilter(e.dataset.filter))})}handleSubmit(e){e.preventDefault();const t=this.input.value.trim(),i=this.dateInput.value;this.validateInput(t,i)&&(this.addTask(t,i),this.form.reset(),this.updateDisplay())}validateInput(e,t){return!e||!t?(alert("Please fill in both task and date fields"),!1):new Date(t)<new Date().setHours(0,0,0,0)?(alert("Please select a future date"),!1):!0}addTask(e,t){const i={id:Date.now(),text:e,dueDate:t,completed:!1,createdAt:new Date().toISOString()};this.tasks.push(i),this.saveTasks()}toggleTask(e){this.tasks=this.tasks.map(t=>t.id===e?{...t,completed:!t.completed}:t),this.saveTasks(),this.updateDisplay()}deleteTask(e){this.tasks=this.tasks.filter(t=>t.id!==e),this.saveTasks(),this.updateDisplay()}setFilter(e){this.currentFilter=e,this.filterBtns.forEach(t=>{t.classList.toggle("active",t.dataset.filter===e)}),this.updateDisplay()}getFilteredTasks(){switch(this.currentFilter){case"pending":return this.tasks.filter(e=>!e.completed);case"completed":return this.tasks.filter(e=>e.completed);default:return this.tasks}}updateDisplay(){const e=this.getFilteredTasks(),t=this.tasks.filter(i=>!i.completed).length;this.taskCounter.textContent=`Stay organized and focused. You have ${t} pending tasks.`,this.taskList.innerHTML=e.sort((i,s)=>new Date(i.dueDate)-new Date(s.dueDate)).map(i=>this.createTaskElement(i)).join("")}createTaskElement(e){return`
            <div class="todo-item ${e.completed?"completed":""}" data-id="${e.id}">
                <input type="checkbox" 
                       ${e.completed?"checked":""} 
                       onclick="taskTracker.toggleTask(${e.id})"
                       class="todo-checkbox">
                <span class="todo-text">${this.escapeHtml(e.text)}</span>
                <span class="date">Due: ${new Date(e.dueDate).toLocaleDateString()}</span>
                <button onclick="taskTracker.deleteTask(${e.id})" class="delete-btn">
                    Delete
                </button>
            </div>
        `}saveTasks(){localStorage.setItem("tasks",JSON.stringify(this.tasks))}escapeHtml(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}}window.taskTracker=new l;
